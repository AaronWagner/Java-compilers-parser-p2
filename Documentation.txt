This program performs a recursive decent parse based on the following grammar adapted from the c-- grammar expanding on the token generation from project 1, which are stored in a ArrayList "tokens"  the index of the current token is tracked by an integer currentToken.  All of the nonterminal in the below grammar are void procedures, but the process is driven by four methods:

Intermediate code generation is performed via recursive decent.  Some type checking has been removed and semantic analysis error terminating the program has been disabled until further integration and comparison with null tokens can be implemented.  The need for comparison with null to be required is because the overall pattern:
Token ruleMethod (Token leftHandSide)
{ Token output=null;
  /*performs rule and updates output to the right hand side, or the temporary token if two tokens are combined  
  */
}  This causes methods that go out to an empty string to return a null.

The following operands are used

ADD		operand1 operand2   result	//adds the two operands and stores the value in the result.
SUB		operand1 operand2   result  //subtracts operand2 from operand1 and stores it in the result
MUL		operand1 operand2,  result  //multiplies the two operands and stores them in result
DIV		operand1 operand2	result  //divides operand1 by operand2 and stores the result in result
ali		size				result  //allocates an integer or series of integers 
alf		size				result  //allocates a float or series of floats               
assign  operand1			result  //assigns operand1 to result
FUNC	operand	type		#params //designates the beginning of a function
END		type				name    //designates the end of a block or function this is a nuloperator unless there is a function
call 	func	#args		result  // calls the defined func with #args of arguments and stores the output in the result  
arrayval array  index       result  //retrieves an element of an array and stores the output in a result
comp 	operand1 operand2	result  //stores the comparison flag in the result
jump						target  // moves the program to the target line
JGTE	operand				target  // moves to the target line if the operand is grater than or equal to.
JLTE	operand				target  // moves to the target line if the operand is later than or equal to.
JNEQ	operand				target  // moves to the target line if the operand is not equal to.
JEQ		operand				target  // moves to the target line if the operand is equal to
JLT 	operand				target  // moves to the target line if the operand is less than. 
JGT		operand				target  // moves to the target line if the operand is greater than.
nulop								// an empty instruction left after an if block to allow for backpatching of an else, otherwise proceeds to the next instruction with no other change in state



bool match (String input)
bool matchType(String input) 
bool look (String input)
bool lookType (String input)
bool match (Collection <String> input)
bool matchType(Collection <String> input) 
bool look (Collection <String> input)
bool lookType (Collection <String> input)
These four methods are overloaded to accept Collections of strings.  These four methods compare the current token,  with the input with match and look comparing lexums, and matchType and lookType comparing Token type (Tokens are typed as keyword, int, float, operand, error, and the unique end type for "$").  match (match and matchType) methods produce the side effect of advancing the current by incrementing the currentToken counter. 

Significant expansion is performed to add the semantic analysis.  Previously void methods () now have a signature of Token method(Token leftHandSide) where a right hand side token is returned or where a method would modify a previous right hand side token a TypeValue containing a string type that is then checked to modify a typevalue.  Methods that do not match a token and "drop out" return a null, this requires significant nullchecking to be added to comparison methods, because Tokens are allowablefor comparison, 

bool compareToken(Token left, Token right) is the primary method for this method compares the types between two tokens seperated by and operator.  Comparetoken returns true for tokens that match type, or null right hand tokens. Before it can return false compare token will reject ather than return false compareToken


void error (String expected)
The other significant method is the void error (String input) method which exits the system after outputting the current token, then the expected token, tokenType, or a general description of what was needed.  This exit is a -1 or improper exit, explicitly describing the source file as incorrect. 

void reject (String error) now supersedes the error method so that 

a - ID
c - num
b - void
d - int
e - if
f - else
g - while
h - return 
n - float

S - Program							
A - declaration-list	
B - declaration					
C - stemmed declarartion		
4 - stemmed-var-declaration		
D - stemmed params decleration	
E - type-specifier		
F - params				
G - compound-stmt		 
H - param-list			
5 - param-list-prime
I - param
J - local-declarations
6 - local-declarations-prime
K - statement-list
L - statement
M - expression-stmt
N - selection-stmt
O - iteration-stmt
P - return-stmt
Q - expression 
R - var
T - simple-expression
U - additive-expression
u - additive-expression-prime
V - relop
W - addop
X - term
y - term-prime
Y - mulop
Z - factor
1 - call
x - call prime
2 - args
3 - arg-list
v - arg-list-prime

Grammar:
S -> EaCA
A -> BA 
B -> EaC   
C -> 4 | (F)G  
4 -> ; | [c] 
E -> d | b | n 
F -> ED
D -> a50 | @  
0 -> ,I0 | @
5 -> [] | @
G -> {JK}
J -> CJ | @
K -> LK | @
L -> M | G | N | O | P
M -> Q; | ;
N -> e(Q)L6
6 -> fL | @
O -> g(Q)L
P -> h7
7 -> ; | Q;
Q -> a9 |cyu9 |(Q)yu9
9-> =Q | 8yu9
R -> a8
8 -> [Q] | @
T -> U9
9 -> VU | @
V -> <x | >x | == | !=
x -> = | @
U -> Xu
u -> WXu | @
W -> + | -
X -> Zy
y -> YZy | @
Y -> * | /
Z -> (Q) | R | 1 | c
1 -> a(2)
2 -> 3 | @
3 -> Qv
v -> ,Qv | @

Firsts:
S = [d, b, n]
A = [d, @, b, n]
B = [d, b, n]
C = [;, (, []
4 = [;, []
E = [d, b, n]
F = [d, b, n]
D = [@, a]
0 = [,]
5 = [[]
G = [{]
J = [@, ;, (, []
K = [g, e, @, c, a, ;, (, {, h]
L = [g, e, c, a, ;, (, {, h]
M = [c, a, ;, (]
N = [e]
6 = [f, @]
O = [g]
P = [h]
7 = [c, a, ;, (]
Q = [c, a, (]
R = [a]
8 = [@, []
T = [c, a, (]
9 = [!, @, >, =, <]
V = [!, >, =, <]
x = [@, =]
U = [c, a, (]
u = [@, +, -]
W = [+, -]
X = [c, a, (]
y = [@, *, /]
Y = [*, /]
Z = [c, a, (]
1 = [a]
2 = [@, c, a, (]
3 = [c, a, (]
v = [@, ,]


Follows:
S = [$]
A = [$]
B = [d, b, n, $]
C = [;, (, [, d, b, n, $, g, e, c, a, {, h]
4 = [;, (, [, d, b, n, $, g, e, c, a, {, h]
E = [a, )]
F = [)]
D = [)]
0 = [|, )]
5 = [,]
G = [g, e, c, a, ;, (, {, h, }]
J = [g, e, c, a, ;, (, {, h]
K = [}]
L = [g, e, c, a, ;, (, {, h, }]
M = [g, e, c, a, ;, (, {, h, }]
N = [g, e, c, a, ;, (, {, h, }]
6 = [g, e, c, a, ;, (, {, h, }]
O = [g, e, c, a, ;, (, {, h, }]
P = [g, e, c, a, ;, (, {, h, }]
7 = [g, e, c, a, ;, (, {, h, }]
Q = [], ;, ), ,]
R = [=, *, /, +, -, !, >, <, ], ;, ), ,]
8 = [=, *, /, +, -, !, >, <, ], ;, ), ,]
T = [], ;, ), ,]
9 = [], ;, ), ,]
V = [c, a, (]
x = [c, a, (]
U = [!, >, =, <, ], ;, ), ,]
u = [!, >, =, <, ], ;, ), ,]
W = [c, a, (]
X = [+, -, !, >, =, <, ], ;, ), ,]
y = [+, -, !, >, =, <, ], ;, ), ,]
Y = [c, a, (]
Z = [*, /, +, -, !, >, =, <, ], ;, ), ,]
1 = [*, /, +, -, !, >, =, <, ], ;, ), ,]
2 = [)]
3 = [)]
v = [)]

